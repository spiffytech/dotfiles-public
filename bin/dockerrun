#!/bin/bash

# Simplifies running CLI tools through Docker.
#
# Exposes your current working directory into docker at /source (configurable).
#
# Reads settings from a config file (.dockerrun). If a .dockerfile is found in
# any directory from cwd up to / (same way as searching for .git folder), that
# directory is mounted at /source in the container, and the container's cwd is
# set to wherever beneath .dockerrun your local cwd is
#
# Commands look like `IMAGE=debian dockerrun bash`
# `dockerrun pwd > /tmp/pwd.txt` writes to your /local/ /tmp/pwd.txt

set -e

# Backwards compatibility with old (less intuitive) config filename
CONFIG_FILE_OLD=.drun.sh

# Current filename to use
CONFIG_FILE=.dockerrun

function read_config_files {
    F=$1
    # Search up the file tree for $CONFIG_FILE
    x=`pwd`;
    while [ "$x" != "/" ];
    do
        if [[ -e "$x/$F" && -f "$x/$F" ]]; then
            # Changing directories lets us get a correct `pwd` inside the script
            cd $x
            PROJECTROOT=$(pwd)  # Assume $F is at our project root
            source "$x/$F"
            cd - > /dev/null
            break
        fi
        x=`dirname "$x"`
    done
}

read_config_files $CONFIG_FILE_OLD
read_config_files $CONFIG_FILE

[ -z $CONTAINER ] || IMAGE=$CONTAINER  # Backwards compatibility with old variable
[ -z $IMAGE ] && IMAGE=debian
[ -z $MOUNTDIR ] && MOUNTDIR=/source
[ -z $PROJECTROOT ] && PROJECTROOT=$(pwd)

# If the project gets mounted into the container at /source
# And our project root on the host is ~/Documents/programs/project
# And our cwd is                      ~/Documents/programs/projects/a/b/c
# This sets the Docker working directory to /source/a/b/c
tmp=$(pwd)
WORKDIR=`echo $MOUNTDIR${tmp#$PROJECTROOT}`
unset tmp

VOLUMES+=("$PROJECTROOT:$MOUNTDIR")  # mount pwd into container

# Handle when SELinux is enforcing (must append :Z to all volume strings)
# http://stackoverflow.com/a/31334443/191438
command -v sestatus >/dev/null 2>&1 && HAS_SELINUX=true || HAS_SELINUX=false
if [[ HAS_SELINUX == "true" ]]; then
    SELINUX_MODE=`sestatus | grep 'Current mode' | awk -F' ' '{print $3}'`
    if [[ SELINUX_MODE == "enforcing" ]]; then
        VOLSTMP=("${VOLUMES[@]}")
        VOLUMES=()
        for v in "${VOLSTMP[@]}"; do
            VOLUMES+=("$v:Z")
        done

    fi
fi

# Add volumes from $CONFIG_FILE
# $CONFIG_FILE **ONLY**. Can't pass arrays to other processes as first-class data
# types in Bash
if [[ ! -z $VOLUMES ]]; then
    VOLUMES_STR=`printf "%s" "${VOLUMES[@]/#/ -v }"`  # arrayJoin omits leading $separator
else
    VOLUMES_STR=""
fi

# Add volumes from $CONFIG_FILE
# $CONFIG_FILE **ONLY**. Can't pass arrays to other processes as first-class data
# types in Bash
if [[ ! -z $ENVVARS ]]; then
    # Leading space in format string is /not/ a mistake. Without that, printf
    # treats the '-e' as a printf flag, not a string literal.
    ENVVAR_STR=`printf " %s" "${ENVVARS[@]/#/ -e }"`  # arrayJoin omits leading $separator
else
    ENVVAR_STR=""
fi

[ -t 1 ] && ISTTY="-it" || ISTTY=""

docker run --rm $ISTTY $PORT $VOLUMES_STR $ENVVAR_STR -w $WORKDIR $DOCKEROPTS $IMAGE "$@"
